---
layout: post
title:  "Go学习笔记(二)"
date:   2019-04-29 20:00:00 +0800
categories: jekyll update
---
# 方法
<li>Go没有类。不过可以为结构体类型定义方法，<b>方法只是一类带特殊的接收者参数的函数</b>。
方法接收者在它自己的参数列表内，位于func关键字和方法名之间。</li>
如下：方法Abs的接收者是Vertex结构体
{% highlight go %}
type Vertex struct {
	X, Y float64
}
//方法
func (v Vertex) Abs() float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}
//函数
func Bbs(x,y float64) float64 {
	return math.Sqrt(x*x+y*y)
}
func main() {
	v := Vertex{3, 4}
	fmt.Println(v.Abs())
}
{% endhighlight %}
<li>只能为在同一包内定义的类型的接收者声明方法，而不能为其它包内定义的类型（包括 int 之类的内建类型）的接收者声明方法。</li>
<li>指针接收者：保存方法对接收者的修改，类似于C#中的ref关键字</li>
## 方法与指针重定向
<li>带指针参数的函数必须接受一个指针；而以指针为接收者的方法，可以接受值或指针，因为Go会将值解释为指针。</li>
<li>接受一个值作为参数的函数必须接受一个指定类型的值；
而以值为接收者的方法被调用时，接收者既能为值又能为指针。</li>
# 接口
接口类型是由一组方法签名定义的集合。
<li>方法与指针重定向的第一条在接口中不适用。当将方法赋值给接口对象时，指针接收者只能接受指针，
但是值类型接收者仍可以接受值或指针</li>
接口与隐式实现
<li>类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有“implements”关键字。</li>
接口值
<li>接口也是值，可以像其他值一样传递。接口值可以用作函数的参数或返回值。接口值保存了一个具体底层类型的具体值。
接口值调用方法时会执行其底层类型的同名方法。</li>

{% highlight go %}
type I interface {
	M()
}

type T struct {
	S string
}

func (t *T) M() {
	fmt.Println(t.S)
}

type F float64

func (f F) M() {
	fmt.Println(f)
}

func main() {
	var i I

	i = &T{"Hello"}
	describe(i)
	i.M()

	i = F(math.Pi)
	describe(i)
	i.M()
}

func describe(i I) {
	fmt.Printf("(%v, %T)\n", i, i)
}
{% endhighlight %}
{% endhighlight %}
底层值为nil的接口值
<li>即使接口内的具体值为nil，方法仍然会被nil接收者调用，不报错。类似于C#扩展方法(string.IsNullorEmpty())</li>
为nil的接口值
<li>底层值为nil的接口值和为nil的接口值是不一样的。nil接口值既不保存值也不保存具体类型，为nil接口调用方法会产生运行时错误。</li>
空接口
<li>空接口可以保存任何类型的值(因为每个类型都至少实现了零个方法)</li>

<li></li>
<li></li>
<li></li>