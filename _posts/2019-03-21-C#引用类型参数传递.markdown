---
layout: post
title:  "C#引用类型参数传递"
date:   2019-03-21 16:33:19 +0800
categories: jekyll update
---

之前一直以为引用类型作为实参传递时，在调用方法内部对其的修改，一定会在调用结束后保留，但今天发现其实并非如此。

{% highlight c# %}
//首先定义TreeNode类
public class TreeNode
    {
        public int val;
        public TreeNode left;
        public TreeNode right;
        public TreeNode(int x)
        {
            val = x;
        }
    }
//声明BuildTree方法
private static void BuildTree(TreeNode root)
    {
        TreeNode tcur = new TreeNode(2);
        tcur.left = tcur.right = null;
		root = tcur;//在这对形参赋值
	}
//场景方法
static void Main(string[] args)
    {
		TreeNode root = null;
		BuildTree(root);
		Console.Write(root == null);
	}
{% endhighlight %}
现象：在Main方法中，最后的输出为true，root仍然是为null。
<br>分析：
<li>传递引用类型时，实际传递的是引用类型的地址，而传递之前的root为null，也就是未分配地址。</li>
<li>在《深入理解C#》书中，作者说：null引用会采用“值传递”的方式传递。</li>
<br><strong>最后，如果在传递参数之前，对root进行了初始化，那么调用方法内部的修改就会保留了。</strong>
{% highlight c# %}
TreeNode root = new TreeNode(-1);
{% endhighlight %}
# 2019-04-22更新
首先看如下的例子：
{% highlight c# %}
static void Main(string[] args)
        {
            StringBuilder text = new StringBuilder("123");
            ChangeSB(text);
            string str = "123";
            ChangeString(str);
        }
        private static void ChangeSB(StringBuilder sb)
        {
            sb.Append("asd");
            //sb = null;
        }
{% endhighlight %}
在主方法中，首先初始化text变量，传入ChangeSB方法后，在方法内部对其进行了修改，此时调用结束后，修改保留；
而当修改ChangeSB方法为
{% highlight c# %}

        private static void ChangeSB(StringBuilder sb)
        {
            //sb.Append("asd");
            sb = null;
        }
{% endhighlight %}
这时候，方法内部对其传入参数进行了重新赋值，调用结束后，text仍然为123。<br>
分析：引用类型变量代表的是指向引用类型保存位置的地址，是一个值。因此引用类型传递时，传递的引用对象的地址，
如果在方法内部对引用类型的变量进行赋值(设为null)，那么只是修改了该变量指向一个内容为null的地址，原来的地址
中的内容没有发生变化。
# ----------------------------------------------------------
引用类型和值类型的区别
<li>引用类型开头有标识类型的数据块</li>
<li>引用类型在赋值等操作时，只需复制地址，而不复制所有数据</li>
<li>引用类型在堆上，值类型存储在它声明的位置。假定有一个类有int类型的实例变量，那么在这个类的任何对象中，
该变量的值总是和对象中的其他数据在一起，也就是在堆上。只有局部变量（方法内部声明的变量）和方法参数在栈上。</li>
<li>值类型不可以派生出其他类型，不需要GC(除非装箱)</li>