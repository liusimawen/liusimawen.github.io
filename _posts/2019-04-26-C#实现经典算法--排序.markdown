---
layout: post
title:  "C#实现经典算法--排序"
date:   2019-04-26 11:15:19 +0800
categories: jekyll update
---
# 排序算法
## 选择排序
每次把最小值放到循环的起点。
{% highlight c# %}
n = unOrderHeap;
            for (int i = 0; i < n.Length; i++)
            {
                int j=i;
                for (int k = i + 1; k < n.Length; k++)
                {
                    if (n[k] < n[j])
                        j = k;
                }
                if (i != j)
                    Swap(n, i, j);
            }

{% endhighlight %}
## 堆排序
两步：1.初始化大根堆，2.交换堆顶元素与最后一个元素
把最大元素和当前堆中数组的最后一个元素交换位置，并且不删除它，
那么就可以得到一个从尾到头的递减序列，从正向来看就是一个递增序列，这就是堆排序。
{% highlight c# %}
public class HeapSort<T extends Comparable<T>> extends Sort<T> {
    /**
     * 数组第 0 个位置不能有元素
     */
    @Override
    public void sort(T[] nums) {
        int N = nums.length - 1;
        for (int k = N / 2; k >= 1; k--)
            sink(nums, k, N);

        while (N > 1) {
            swap(nums, 1, N--);
            sink(nums, 1, N);
        }
    }

    private void sink(T[] nums, int k, int N) {
        while (2 * k <= N) {
            int j = 2 * k;
            if (j < N && less(nums, j, j + 1))
                j++;
            if (!less(nums, k, j))
                break;
            swap(nums, k, j);
            k = j;
        }
    }

    private boolean less(T[] nums, int i, int j) {
        return nums[i].compareTo(nums[j]) < 0;
    }
}
{% endhighlight %}
## 插入排序
比较相邻元素，将较小的元素交换靠前。
{% highlight c# %}
n = unOrderHeap;
            int l = n.Length;
            for (int i = 1; i < l; i++)
            {
                for (int j = i; j > 0 && n[j] < n[j - 1]; j--)
                {
                    Swap(n, j, j - 1);
                }
            }

{% endhighlight %}
## 希尔排序
插入排序的升级版，每次对间隔h的元素进行比较
{% highlight c# %}
public void sort(T[] nums) {
        int N = nums.length;
        int h = 1;

        while (h < N / 3) {
            h = 3 * h + 1; // 1, 4, 13, 40, ...
        }

        while (h >= 1) {
            for (int i = h; i < N; i++) {
                for (int j = i; j >= h && less(nums[j], nums[j - h]); j -= h) {
                    swap(nums, j, j - h);
                }
            }
            h = h / 3;
        }
}

{% endhighlight %}
## 冒泡排序
每次循环将最大元素放至当前循环的最后位置。
{% highlight c# %}
			n = unOrderHeap;
            int i = n.Length-1;
            
            while (i > 0)
            {
                int lastExChangeIndex = 0;
                for (int j = 0; j < i; j++)
                {
                    if (n[j] > n[j + 1])
                    {
                        Swap(n, j, j + 1);
                        lastExChangeIndex = j;
                    }
                }
                i = lastExChangeIndex;
            }

{% endhighlight %}
## 快速排序
{% highlight c# %}
private static int Partition(int[] n, int low, int high)
        {
            int tmp = n[low];
            int pivotkey = n[low];
            while (low < high)
            {
                while (low < high && n[high] >= pivotkey)
                {
                    high--;
                }
                if(low<high)
                    n[low++] = n[high];//low++是重点
                while (low < high && n[low] <= pivotkey)
                {
                    low++;
                }
                if (low < high)
                    n[high--] = n[low];
            }
            n[low] = tmp;
            return low;//return high;
        }
private static void QuickSort(int[] n, int s, int t)
        {            
            if (s < t)
            {
                int pivotloc = Partition(n, s, t);
                QuickSort(n, s, pivotloc - 1);
                QuickSort(n, pivotloc + 1, t);
            }
        }

{% endhighlight %}
## 归并排序
<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.md#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank">详情</a>
{% highlight c# %}
private static void Merge(int[] source, int[] dest, int i, int m, int n)
        {
            //将有序的source[i..m],source[m+1..n]归并为有序的dest[i..n]
            int j = -1; int k = -1;
            for (k = i, j = m + 1; i <= m&&j<=n; k++)
            {
                if (source[i] < source[j])
                    dest[k] = source[i++];
                else
                    dest[k] = source[j++];
            }
            while (i <= m)
                dest[k++] = source[i++];
            while (j <= n)
                dest[k++] = source[j++];
        }
//sr表示原始序列，tr1存放排序后的序列，s=0，t=sr.Length-1
        private static void Sort(int[] sr, int[] tr1, int s, int t)
        {
            //int[] ret = new int[n.Length];
            int[] tr2 = new int[t - s + 1];
            if (s == t)
                tr1[s] = sr[s];
            else
            {
                int tmp = (s + t) / 2;
                Sort(sr, tr2, s, tmp);
                Sort(sr, tr2, tmp + 1, t);
                Merge(tr2, tr1, s,tmp, t);
            }
        }

{% endhighlight %}
## 二叉树排序
{% highlight c# %}
private static void BuildBSTree(ref TreeNode root, int cur)
        {
            TreeNode tcur = new TreeNode(cur);
            tcur.left = tcur.right = null;
            if (root == null)
                root = tcur;
            else
            {
                TreeNode p = root;
                TreeNode f = null;
                while (p != null)
                {
                    if (p.val <= cur)
                    {
                        f = p;
                        p = p.right;
                    }
                    else
                    {
                        f = p;
                        p = p.left;
                    }
                }
                if (f.val > cur)
                    f.left = tcur;
                else
                    f.right = tcur;
            }
            
        }
        public static void BSTSort(int[] n=null)
        {
            n = unOrderHeap;
            TreeNode root = null;
            for (int i = 0; i < n.Length; i++)
            {
                BuildBSTree(ref root, n[i]);
            }
            OutPutMiddle(root);
        }

{% endhighlight %}
