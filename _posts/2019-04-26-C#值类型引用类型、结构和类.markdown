---
layout: post
title:  "C#值类型引用类型，结构和类"
date:   2019-04-26 16:15:19 +0800
categories: jekyll update
---
# 引用类型和值类型的区别
<li>所有值类型隐式派生自System.ValueType,所有引用类型隐式派生自System.Object</li>
<li>值类型不能有继承，引用类型可以。如结构体是值类型，结构体不能被继承。但结构体里面可以包括引用类型。
值类型也可以有自己的方法，如DateTime.Now(),但方法是隐式的密封方法。</li>
<li>值类型的生命周期是其定义域，当值类型离开其定义域后将被立刻销毁，不需要垃圾回收。
引用类型则会进入垃圾回收分代算法。我们不知道何时才会销毁。</li>
<li>引用类型开头有标识类型的数据块</li>
<li>引用类型在赋值等操作时，只需复制地址，而不复制所有数据</li>
<li>引用类型在堆上，值类型存储在它声明的位置。假定有一个类有int类型的实例变量，那么在这个类的任何对象中，
该变量的值总是和对象中的其他数据在一起，也就是在堆上。只有局部变量（方法内部声明的变量）和方法参数在栈上。</li>
<li>值类型不可以派生出其他类型，不需要GC(除非装箱)</li>

# 结构和类
<li>结构是值类型，它继承自System.ValueType，而类是引用类型。</li>
<li>因为值类型不能被继承，故结构不能被继承。</li>
<li>结构可以有自己的方法，一个典型的例子为.NET中的结构体Int32含有方法Parse，TryParse等等。</li>
<li>结构可以实现接口。</li>
<li>虽然结构是值类型，这不意味着结构中不能包括引用类型（但如果一个结构里面包含引用类型，考虑使用类）。
结构体如果含有引用类型，则那部分也会分配在堆上。</li>
<li>结构体的构造函数必须初始化它的所有成员。结构的构造函数不会被自动调用。</li>
